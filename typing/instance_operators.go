/* WARNING!
   This file is automatically generated through scripts/generator.py
   DON'T EDIT IT MANUALLY. ALL CHANGES WILL BE LOST! */

package typing

func (o Instance) Add(other Object, first bool) (Object, Object) {
	if fun := o.getProp("_add"); fun != nil {
		res := fun.(Callable).Call(o, map[string]Object{"other": other, "first": Bool{first}}, []Object{}, map[string]Object{}, o.File)
		if ret, ok := res.(Return); ok {
			return ret.Data, nil
		} else {
			return nil, res.TData()
		}
	}
	return nil, nil
}

func (o Instance) Sub(other Object, first bool) (Object, Object) {
	if fun := o.getProp("_sub"); fun != nil {
		res := fun.(Callable).Call(o, map[string]Object{"other": other, "first": Bool{first}}, []Object{}, map[string]Object{}, o.File)
		if ret, ok := res.(Return); ok {
			return ret.Data, nil
		} else {
			return nil, res.TData()
		}
	}
	return nil, nil
}

func (o Instance) Mul(other Object, first bool) (Object, Object) {
	if fun := o.getProp("_mul"); fun != nil {
		res := fun.(Callable).Call(o, map[string]Object{"other": other, "first": Bool{first}}, []Object{}, map[string]Object{}, o.File)
		if ret, ok := res.(Return); ok {
			return ret.Data, nil
		} else {
			return nil, res.TData()
		}
	}
	return nil, nil
}

func (o Instance) Div(other Object, first bool) (Object, Object) {
	if fun := o.getProp("_div"); fun != nil {
		res := fun.(Callable).Call(o, map[string]Object{"other": other, "first": Bool{first}}, []Object{}, map[string]Object{}, o.File)
		if ret, ok := res.(Return); ok {
			return ret.Data, nil
		} else {
			return nil, res.TData()
		}
	}
	return nil, nil
}

func (o Instance) Mod(other Object, first bool) (Object, Object) {
	if fun := o.getProp("_mod"); fun != nil {
		res := fun.(Callable).Call(o, map[string]Object{"other": other, "first": Bool{first}}, []Object{}, map[string]Object{}, o.File)
		if ret, ok := res.(Return); ok {
			return ret.Data, nil
		} else {
			return nil, res.TData()
		}
	}
	return nil, nil
}

func (o Instance) Pow(other Object, first bool) (Object, Object) {
	if fun := o.getProp("_pow"); fun != nil {
		res := fun.(Callable).Call(o, map[string]Object{"other": other, "first": Bool{first}}, []Object{}, map[string]Object{}, o.File)
		if ret, ok := res.(Return); ok {
			return ret.Data, nil
		} else {
			return nil, res.TData()
		}
	}
	return nil, nil
}
